[{"title":"Mac.oh-my-zsh","url":"/2022/04/24/9329f2b80cc6.html","content":"\n## 目录\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## 参考\n\n- [参考](#%E5%8F%82%E8%80%83)\n- [简介](#%E7%AE%80%E4%BB%8B)\n- [安装](#%E5%AE%89%E8%A3%85)\n- [升级](#%E5%8D%87%E7%BA%A7)\n- [关闭自动更新](#%E5%85%B3%E9%97%AD%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## 参考\n\n1. [github地址](https://github.com/ohmyzsh/ohmyzsh)\n2. https://blog.csdn.net/u011675334/article/details/109149782\n3. https://juejin.cn/post/6923448225571700750\n4. \n\n## 简介\n\n> iTerm2 终端\n\n## 安装\n\n| Method    | Command                                                      |\n| --------- | ------------------------------------------------------------ |\n| **curl**  | `sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"` |\n| **wget**  | `sh -c \"$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"` |\n| **fetch** | `sh -c \"$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"` |\n\n\n\n## 升级\n\n```bash\n# 方式一\nomz update\n# 方式二\nupgrade_oh_my_zsh\n```\n\n## 关闭自动更新\n\n```bash\n# 进入配置文件\nvim ~/.zshrc\n# 找到 DISABLE_AUTO_UPDATE 设置\nDISABLE_AUTO_UPDATE=\"true\"\n```\n\n","tags":["Mac"],"categories":["Mac"]},{"title":"Mac.查看端口ip","url":"/2022/04/22/c76a095cd738.html","content":"\n## 目录\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## 参考\n\n- [参考](#%E5%8F%82%E8%80%83)\n- [文档](#%E6%96%87%E6%A1%A3)\n- [实例](#%E5%AE%9E%E4%BE%8B)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## 参考\n\n\n\n## 文档\n\n> 源文档信息\n\n```bash\n$ lsof --help\nlsof: illegal option character: -\nlsof: illegal option character: e\nlsof: no process ID specified\nlsof 4.91\n latest revision: ftp://lsof.itap.purdue.edu/pub/tools/unix/lsof/\n latest FAQ: ftp://lsof.itap.purdue.edu/pub/tools/unix/lsof/FAQ\n latest man page: ftp://lsof.itap.purdue.edu/pub/tools/unix/lsof/lsof_man\n usage: [-?abhlnNoOPRtUvVX] [+|-c c] [+|-d s] [+D D] [+|-f[cgG]]\n [-F [f]] [-g [s]] [-i [i]] [+|-L [l]] [+|-M] [-o [o]] [-p s]\n [+|-r [t]] [-s [p:s]] [-S [t]] [-T [t]] [-u s] [+|-w] [-x [fl]] [--] [names]\nDefaults in parentheses; comma-separated set (s) items; dash-separated ranges.\n  -?|-h list help          -a AND selections (OR)     -b avoid kernel blocks\n  -c c  cmd c ^c /c/[bix]  +c w  COMMAND width (9)    +d s  dir s files\n  -d s  select by FD set   +D D  dir D tree *SLOW?*   -i select IPv[46] files\n  -l list UID numbers      -n no host names           -N select NFS files\n  -o list file offset      -O no overhead *RISKY*     -P no port names\n  -R list paRent PID       -s list file size          -t terse listing\n  -T disable TCP/TPI info  -U select Unix socket      -v list version info\n  -V verbose search        +|-w  Warnings (+)         -X file descriptor table only\n  -- end option scan\n  +f|-f  +filesystem or -file names     +|-f[cgG] Ct flaGs\n  -F [f] select fields; -F? for help\n  +|-L [l] list (+) suppress (-) link counts < l (0 = all; default = 0)\n  +|-M   portMap registration (-)       -o o   o 0t offset digits (8)\n  -p s   exclude(^)|select PIDs         -S [t] t second stat timeout (15)\n  -T fqs TCP/TPI Fl,Q,St (s) info\n  -g [s] exclude(^)|select and print process group IDs\n  -i i   select by IPv[46] address: [46][proto][@host|addr][:svc_list|port_list]\n  +|-r [t[m<fmt>]] repeat every t seconds (15);  + until no files, - forever.\n       An optional suffix to t is m<fmt>; m must separate t from <fmt> and\n      <fmt> is an strftime(3) format for the marker line.\n  -s p:s  exclude(^)|select protocol (p = TCP|UDP) states by name(s).\n  -u s   exclude(^)|select login|UID set s\n  -x [fl] cross over +d|+D File systems or symbolic Links\n  names  select named files or files on named file systems\nAnyone can list all files; /dev warnings disabled; kernel ID check disabled.\n```\n\n\n\n## 实例\n\n根据具体的端口号查找(用80端口举例)，使用此命令\n\n```bash\nlsof -nP -i:80\n```\n\n根据应用程序名查找（用QQ举例），使用如下命令\n\n```bash\nlsof -nP -i | grep QQ\n```\n\n效果如下所示\n\n```bash\n$ lsof -i:4000| grep node\nnode      97563 admin   33u  IPv6 0x6b5530af6a0475c7      0t0  TCP *:terabase (LISTEN)\n```\n\n","tags":["Mac"],"categories":["Mac"]},{"title":"Spring Boot SSL","url":"/2022/04/21/e0a49e72a687.html","content":"\n## 目录\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## 参考\n\n- [参考](#%E5%8F%82%E8%80%83)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## 参考\n\n[原文](https://blog.csdn.net/qq_20051535/article/details/108249482)\n\n\n\n准备把面试的项目上线，因为是小程序要求必须https，记录下完整流程和走过的坑\n\n第一步 申请SSL证书\n这里选了免费的 https://freessl.cn/  ，大家可以根据自己需求进行。\n\n我选的 离线生成，需要解析验证域名，阿里云用户可选一键生成，但需要提供授权码，不推荐\n\n<font color=\"red\">亚洲诚信不支持小程序！！只支持电脑！！别申请错了</font>\n\nPS：需要安装他要求的一个客户端软件，根据提示解析域名就会自动成功，\n\n如果一直验证加载没反应就改用【一键申请】之后选择【我不是阿里云用户】，就会从网页验证解析改成软件验证，可秒过）\n\n![img](/images/Spring-Boot-SSL/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMDUxNTM1,size_16,color_FFFFFF,t_70.png)\n\n\n\n第二步 导出证书\n每个平台导出方法不一样，我这里以我的为例\n\n1. 通过这个网站软件导出证书\n\n![img](/images/Spring-Boot-SSL/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMDUxNTM1,size_16,color_FFFFFF,t_70-20220421102710130.png)\n\n![img](/images/Spring-Boot-SSL/20200826230511203.png)\n\n![img](/images/Spring-Boot-SSL/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMDUxNTM1,size_16,color_FFFFFF,t_70-20220421102732911.png)\n\n\n\n他会自动下载一个zip压缩包：\n\n打开 iis 的（不是tomcat文件夹，目前阿里云等SSL申请渠道都只给pfx证书，使用jks证书可能到期后更改麻烦）\n\n![img](/images/Spring-Boot-SSL/20200826230829424.png)\n\n ![img](/images/Spring-Boot-SSL/20200826230907235.png)\n\n![img](/images/Spring-Boot-SSL/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIwMDUxNTM1,size_16,color_FFFFFF,t_70-20220421102753088.png)\n\n\n\n第三步配置的代码：\n\n```yaml\nserver:\n  port: 443\n  ssl:\n    key-store: classpath:aaaaa.pfx\n    key-store-password: yourpassword\n    keyStoreType: PKCS12\n```\n\n 密码就是 导出证书 第五步 随便写的那个密码，对应上就行写啥无所谓没要求！\n\n文件名也是对应上就行没要求！\n\n\n\n\n\n![](/../images/16513709992312.jpg)\n\n","tags":["Spring","Spring Boot"],"categories":["Spring","Spring Boot"]},{"title":"工具.Charles","url":"/2022/04/19/43e7174d713e.html","content":"\n## 目录\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [参考](#%E5%8F%82%E8%80%83)\n- [安装](#%E5%AE%89%E8%A3%85)\n- [配置](#%E9%85%8D%E7%BD%AE)\n  - [获取本地ip](#%E8%8E%B7%E5%8F%96%E6%9C%AC%E5%9C%B0ip)\n  - [配置手机代理](#%E9%85%8D%E7%BD%AE%E6%89%8B%E6%9C%BA%E4%BB%A3%E7%90%86)\n  - [允许访问](#%E5%85%81%E8%AE%B8%E8%AE%BF%E9%97%AE)\n  - [移动端安装ssl证书](#%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AE%89%E8%A3%85ssl%E8%AF%81%E4%B9%A6)\n  - [charle监听配置](#charle%E7%9B%91%E5%90%AC%E9%85%8D%E7%BD%AE)\n  - [PC 配置信任证书](#pc-%E9%85%8D%E7%BD%AE%E4%BF%A1%E4%BB%BB%E8%AF%81%E4%B9%A6)\n- [监听](#%E7%9B%91%E5%90%AC)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## 参考\n\nhttps://www.jianshu.com/p/5539599c7a25\n\n## 安装\n\n[Charles官网下载](https://www.charlesproxy.com/download/)\n\n安装Android studio\n\n\n\n## 配置\n\n### 获取本地ip\n\n<img src=\"/images/工具.Charles/image-20220419160314861.png\" alt=\"image-20220419160314861\" style=\"zoom:50%;\" />\n\n\n\n### 配置手机代理\n\n> 如下图配置。\n>\n> 步骤： 进入”互联网“-”互联网详情“- ”右上侧的编辑按钮“-”代理配置 即可\n\n<img src=\"/images/工具.Charles/image-20220419160737445.png\" alt=\"image-20220419160737445\" style=\"zoom:50%;\" />\n\n### 允许访问\n\n<img src=\"/images/工具.Charles/image-20220419161220041.png\" alt=\"image-20220419161220041\" style=\"zoom:50%;\" />\n\n\n\n### 移动端安装ssl证书\n\n如下图路径获取下载证书地址 chls.pro/ssl\n\n<img src=\"/images/工具.Charles/image-20220419161700725.png\" alt=\"image-20220419161700725\" style=\"zoom:50%;\" />\n\n2.移动端浏览器访问 chls.pro/ssl 下载证书\n\n3.移动端： “设置”-“安全”-“加密与凭据”-“安装证书“-”CA证书“\n\n\n\n### charle监听配置\n\n​\t<img src=\"/images/工具.Charles/image-20220419162547886.png\" alt=\"image-20220419162547886\" style=\"zoom:50%;\" />\n\n### PC 配置信任证书\n\n<img src=\"/images/工具.Charles/image-20220419163210992.png\" alt=\"image-20220419163210992\" style=\"zoom:50%;\" />\n\n进入钥匙串对 charles证书设置 信任 \n\n> 注意： 点击 “信任》” 即可配置 \n\n## 监听\n\n新打开一个session 即可监听\n\n<img src=\"/images/工具.Charles/image-20220419162708508.png\" alt=\"image-20220419162708508\" style=\"zoom:50%;\" />","categories":["工具"]},{"title":"Java.内置工具.反编译class文件","url":"/2022/04/19/4b1bac4dca8b.html","content":"\n## 目录\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [参考](#%E5%8F%82%E8%80%83)\n- [javap](#javap)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## 参考\n\n\n\n## javap\n\n> 注意： 常用 javap -c \n\n```bash\njavap --help\n用法: javap <options> <classes>\n其中, 可能的选项包括:\n  -help  --help  -?        输出此用法消息\n  -version                 版本信息\n  -v  -verbose             输出附加信息\n  -l                       输出行号和本地变量表\n  -public                  仅显示公共类和成员\n  -protected               显示受保护的/公共类和成员\n  -package                 显示程序包/受保护的/公共类\n                           和成员 (默认)\n  -p  -private             显示所有类和成员\n  -c                       对代码进行反汇编\n  -s                       输出内部类型签名\n  -sysinfo                 显示正在处理的类的\n                           系统信息 (路径, 大小, 日期, MD5 散列)\n  -constants               显示最终常量\n  -classpath <path>        指定查找用户类文件的位置\n  -cp <path>               指定查找用户类文件的位置\n  -bootclasspath <path>    覆盖引导类文件的位置\n```\n\n","tags":["JVM"],"categories":["JVM"]},{"title":"Linux vi/vim","url":"/2022/04/19/0a35c580431e.html","content":"\n## 目录\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## 参考\n\n- [参考](#%E5%8F%82%E8%80%83)\n- [什么是 vim？](#%E4%BB%80%E4%B9%88%E6%98%AF-vim)\n- [vi/vim 的使用](#vivim-%E7%9A%84%E4%BD%BF%E7%94%A8)\n  - [命令模式：](#%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F)\n  - [输入模式](#%E8%BE%93%E5%85%A5%E6%A8%A1%E5%BC%8F)\n  - [底线命令模式](#%E5%BA%95%E7%BA%BF%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F)\n- [vi/vim 使用实例](#vivim-%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B)\n  - [使用 vi/vim 进入一般模式](#%E4%BD%BF%E7%94%A8-vivim-%E8%BF%9B%E5%85%A5%E4%B8%80%E8%88%AC%E6%A8%A1%E5%BC%8F)\n  - [按下 i 进入输入模式(也称为编辑模式)，开始编辑文字](#%E6%8C%89%E4%B8%8B-i-%E8%BF%9B%E5%85%A5%E8%BE%93%E5%85%A5%E6%A8%A1%E5%BC%8F%E4%B9%9F%E7%A7%B0%E4%B8%BA%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F%E5%BC%80%E5%A7%8B%E7%BC%96%E8%BE%91%E6%96%87%E5%AD%97)\n  - [按下 ESC 按钮回到一般模式](#%E6%8C%89%E4%B8%8B-esc-%E6%8C%89%E9%92%AE%E5%9B%9E%E5%88%B0%E4%B8%80%E8%88%AC%E6%A8%A1%E5%BC%8F)\n  - [在一般模式中按下 **:wq** 储存后离开 vi](#%E5%9C%A8%E4%B8%80%E8%88%AC%E6%A8%A1%E5%BC%8F%E4%B8%AD%E6%8C%89%E4%B8%8B-wq-%E5%82%A8%E5%AD%98%E5%90%8E%E7%A6%BB%E5%BC%80-vi)\n- [vi/vim 按键说明](#vivim-%E6%8C%89%E9%94%AE%E8%AF%B4%E6%98%8E)\n  - [第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等](#%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86%E4%B8%80%E8%88%AC%E6%A8%A1%E5%BC%8F%E5%8F%AF%E7%94%A8%E7%9A%84%E5%85%89%E6%A0%87%E7%A7%BB%E5%8A%A8%E5%A4%8D%E5%88%B6%E7%B2%98%E8%B4%B4%E6%90%9C%E7%B4%A2%E6%9B%BF%E6%8D%A2%E7%AD%89)\n  - [第二部分：一般模式切换到编辑模式的可用的按钮说明](#%E7%AC%AC%E4%BA%8C%E9%83%A8%E5%88%86%E4%B8%80%E8%88%AC%E6%A8%A1%E5%BC%8F%E5%88%87%E6%8D%A2%E5%88%B0%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8F%AF%E7%94%A8%E7%9A%84%E6%8C%89%E9%92%AE%E8%AF%B4%E6%98%8E)\n  - [第三部分：一般模式切换到指令行模式的可用的按钮说明](#%E7%AC%AC%E4%B8%89%E9%83%A8%E5%88%86%E4%B8%80%E8%88%AC%E6%A8%A1%E5%BC%8F%E5%88%87%E6%8D%A2%E5%88%B0%E6%8C%87%E4%BB%A4%E8%A1%8C%E6%A8%A1%E5%BC%8F%E7%9A%84%E5%8F%AF%E7%94%A8%E7%9A%84%E6%8C%89%E9%92%AE%E8%AF%B4%E6%98%8E)\n- [补充](#%E8%A1%A5%E5%85%85)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## 参考\n\n[原文](https://www.runoob.com/linux/linux-vim.html)\n\n\n\n所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。\n\n但是目前我们使用比较多的是 vim 编辑器。\n\nvim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。\n\n相关文章：[史上最全Vim快捷键键位图 — 入门到进阶](https://www.runoob.com/w3cnote/all-vim-cheatsheat.html)\n\n------\n\n## 什么是 vim？\n\nVim 是从 vi 发展出来的一个文本编辑器。代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。\n\n简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。\n\n连 vim 的官方网站 (https://www.vim.org/) 自己也说 vim 是一个程序开发工具而不是文字处理软件。\n\nvim 键盘图：\n\n![img](/images/Linux-vivim/vi-vim-cheat-sheet-sch.gif)\n\n------\n\n## vi/vim 的使用\n\n基本上 vi/vim 共分为三种模式，分别是**命令模式（Command mode）**，**输入模式（Insert mode）**和**底线命令模式（Last line mode）**。 这三种模式的作用分别是：\n\n### 命令模式：\n\n用户刚刚启动 vi/vim，便进入了命令模式。\n\n此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。\n\n以下是常用的几个命令：\n\n* **i** 切换到输入模式，以输入字符。\n* **x** 删除当前光标所在处的字符。\n* **:** 切换到底线命令模式，以在最底一行输入命令。\n\n若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。\n\n命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。\n\n### 输入模式\n\n在命令模式下按下i就进入了输入模式。\n\n在输入模式中，可以使用以下按键：\n\n* **字符按键以及Shift组合**，输入字符\n* **ENTER**，回车键，换行\n* **BACK SPACE**，退格键，删除光标前一个字符\n* **DEL**，删除键，删除光标后一个字符\n* **方向键**，在文本中移动光标\n* **HOME**/**END**，移动光标到行首/行尾\n* **Page Up**/**Page Down**，上/下翻页\n* **Insert**，切换光标为输入/替换模式，光标将变成竖线/下划线\n* **ESC**，退出输入模式，切换到命令模式\n\n### 底线命令模式\n\n在命令模式下按下:（英文冒号）就进入了底线命令模式。\n\n底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。\n\n在底线命令模式中，基本的命令有（已经省略了冒号）：\n\n* q 退出程序\n* w 保存文件\n\n按ESC键可随时退出底线命令模式。\n\n简单的说，我们可以将这三个模式想成底下的图标来表示：\n\n![img](/images/Linux-vivim/vim-vi-workmodel.png)\n\n------\n\n## vi/vim 使用实例\n\n### 使用 vi/vim 进入一般模式\n\n如果你想要使用 vi 来建立一个名为 runoob.txt 的文件时，你可以这样做：\n\n```\n$ vim runoob.txt\n```\n\n直接输入 **vi 文件名** 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！\n\n![img](/images/Linux-vivim/078207F0-B204-4464-AAEF-982F45EDDAE9.jpg)\n\n### 按下 i 进入输入模式(也称为编辑模式)，开始编辑文字\n\n在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！\n\n在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。\n\n这个时候，键盘上除了 **Esc** 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。\n\n![img](/images/Linux-vivim/1C928383-471E-4AF1-A61E-9E2CCBD5A913.jpg)\n\n### 按下 ESC 按钮回到一般模式\n\n好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 **Esc** 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！\n\n### 在一般模式中按下 **:wq** 储存后离开 vi\n\nOK，我们要存档了，存盘并离开的指令很简单，输入 **:wq** 即可保存离开！\n\n![img](/images/Linux-vivim/B2FB5146-327C-4019-AC96-DD7A8EE7460C.jpg)\n\nOK! 这样我们就成功创建了一个 runoob.txt 的文件。\n\n------\n\n## vi/vim 按键说明\n\n除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。\n\n### 第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等\n\n| 移动光标的方法                                               |                                                              |\n| :----------------------------------------------------------- | ------------------------------------------------------------ |\n| h 或 向左箭头键(←)                                           | 光标向左移动一个字符                                         |\n| j 或 向下箭头键(↓)                                           | 光标向下移动一个字符                                         |\n| k 或 向上箭头键(↑)                                           | 光标向上移动一个字符                                         |\n| l 或 向右箭头键(→)                                           | 光标向右移动一个字符                                         |\n| 如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 \"30j\" 或 \"30↓\" 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！ |                                                              |\n| [Ctrl] + [f]                                                 | 屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)          |\n| [Ctrl] + [b]                                                 | 屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)           |\n| [Ctrl] + [d]                                                 | 屏幕『向下』移动半页                                         |\n| [Ctrl] + [u]                                                 | 屏幕『向上』移动半页                                         |\n| +                                                            | 光标移动到非空格符的下一行                                   |\n| -                                                            | 光标移动到非空格符的上一行                                   |\n| n<space>                                                     | 那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。 |\n| 0 或功能键[Home]                                             | 这是数字『 0 』：移动到这一行的最前面字符处 (常用)           |\n| $ 或功能键[End]                                              | 移动到这一行的最后面字符处(常用)                             |\n| H                                                            | 光标移动到这个屏幕的最上方那一行的第一个字符                 |\n| M                                                            | 光标移动到这个屏幕的中央那一行的第一个字符                   |\n| L                                                            | 光标移动到这个屏幕的最下方那一行的第一个字符                 |\n| G                                                            | 移动到这个档案的最后一行(常用)                               |\n| nG                                                           | n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu) |\n| gg                                                           | 移动到这个档案的第一行，相当于 1G 啊！ (常用)                |\n| n<Enter>                                                     | n 为数字。光标向下移动 n 行(常用)                            |\n| 搜索替换                                                     |                                                              |\n| /word                                                        | 向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用) |\n| ?word                                                        | 向光标之上寻找一个字符串名称为 word 的字符串。               |\n| n                                                            | 这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！ |\n| N                                                            | 这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。 |\n| 使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！ |                                                              |\n| :n1,n2s/word1/word2/g                                        | n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用) |\n| **:1,$s/word1/word2/g** 或 **:%s/word1/word2/g**             | 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用) |\n| **:1,$s/word1/word2/gc** 或 **:%s/word1/word2/gc**           | 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用) |\n| 删除、复制与贴上                                             |                                                              |\n| x, X                                                         | 在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用) |\n| nx                                                           | n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。 |\n| dd                                                           | 剪切游标所在的那一整行(常用)，用 p/P 可以粘贴。              |\n| ndd                                                          | n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p/P 可以粘贴。 |\n| d1G                                                          | 删除光标所在到第一行的所有数据                               |\n| dG                                                           | 删除光标所在到最后一行的所有数据                             |\n| d$                                                           | 删除游标所在处，到该行的最后一个字符                         |\n| d0                                                           | 那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符      |\n| yy                                                           | 复制游标所在的那一行(常用)                                   |\n| nyy                                                          | n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用) |\n| y1G                                                          | 复制游标所在行到第一行的所有数据                             |\n| yG                                                           | 复制游标所在行到最后一行的所有数据                           |\n| y0                                                           | 复制光标所在的那个字符到该行行首的所有数据                   |\n| y$                                                           | 复制光标所在的那个字符到该行行尾的所有数据                   |\n| p, P                                                         | p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用) |\n| J                                                            | 将光标所在行与下一行的数据结合成同一行                       |\n| c                                                            | 重复删除多个数据，例如向下删除 10 行，[ 10cj ]               |\n| u                                                            | 复原前一个动作。(常用)                                       |\n| [Ctrl]+r                                                     | 重做上一个动作。(常用)                                       |\n| 这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！ |                                                              |\n| .                                                            | 不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用) |\n\n### 第二部分：一般模式切换到编辑模式的可用的按钮说明\n\n| 进入输入或取代的编辑模式                                     |                                                              |\n| :----------------------------------------------------------- | ------------------------------------------------------------ |\n| i, I                                                         | 进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用) |\n| a, A                                                         | 进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用) |\n| o, O                                                         | 进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用) |\n| r, R                                                         | 进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用) |\n| 上面这些按键中，在 vi 画面的左下角处会出现『--INSERT--』或『--REPLACE--』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！ |                                                              |\n| [Esc]                                                        | 退出编辑模式，回到一般模式中(常用)                           |\n\n### 第三部分：一般模式切换到指令行模式的可用的按钮说明\n\n| 指令行的储存、离开等指令                                     |                                                              |\n| :----------------------------------------------------------- | ------------------------------------------------------------ |\n| :w                                                           | 将编辑的数据写入硬盘档案中(常用)                             |\n| :w!                                                          | 若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！ |\n| :q                                                           | 离开 vi (常用)                                               |\n| :q!                                                          | 若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。    |\n| 注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～ |                                                              |\n| :wq                                                          | 储存后离开，若为 :wq! 则为强制储存后离开 (常用)              |\n| ZZ                                                           | 这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出) |\n| ZQ                                                           | 不保存，强制退出。效果等同于 **:q!**。                       |\n| :w [filename]                                                | 将编辑的数据储存成另一个档案（类似另存新档）                 |\n| :r [filename]                                                | 在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面 |\n| :n1,n2 w [filename]                                          | 将 n1 到 n2 的内容储存成 filename 这个档案。                 |\n| :! command                                                   | 暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！ |\n| vim 环境的变更                                               |                                                              |\n| :set nu                                                      | 显示行号，设定之后，会在每一行的前缀显示该行的行号           |\n| :set nonu                                                    | 与 set nu 相反，为取消行号！                                 |\n\n特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。\n\n举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。\n\n\n\n## 补充\n\n插入模式\n\n1. 自动补全：**ctrl** + **n**\n2. **\\p<** 插入一个include，并把光标置于<>中间\n3. **\\im** 插入主函数\n4. **\\ip** 插入printf，并自动添加**\\n**，且把光标置于双引号中间\n\nvim快捷键补充（编辑模式）\n\n1. dw 删除一个单词（配合b：将光标置于所在单词的首部）\n2. yw 复制一个单词（配合p：粘贴）\n\nvim快捷键补充（插入与编辑模式通用）\n\n1. \\rr 运行程序\n2. \\rc 保存并编译程序（会生成二进制文件）","tags":["Linux"],"categories":["Linux"]},{"title":"iTerm2设置代理","url":"/2022/04/19/e7322714733f.html","content":"\n\n\n## 目录\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## 参考\n\n- [参考](#%E5%8F%82%E8%80%83)\n- [设置代理](#%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86)\n- [取消设置](#%E5%8F%96%E6%B6%88%E8%AE%BE%E7%BD%AE)\n- [快速切换](#%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## 参考\n\n[原文](https://honglu.me/2015/11/06/%E7%BB%99iTerm%E7%BB%88%E7%AB%AF%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/)\n\n## 设置代理\n\n使用 curl，wget，brew等http应用程序会调用http_proxy和https_proxy这两环境变量进行代理，通过下面方式设置：\n\n```\nexport http_proxy=http://127.0.0.1:8087\nexport https_proxy=$http_proxy\n```\n\n\n\n## 取消设置\n\n```\nunset http_proxy https_proxy\n```\n\n## 快速切换\n\n可以在 `~/.zshrc` 或者 `~/.bash_profile` 中添加这样的alias：\n\n```\nalias goproxy='export http_proxy=http://127.0.0.1:8087 https_proxy=http://127.0.0.1:8087'\nalias disproxy='unset http_proxy https_proxy'\n```\n\n这样下次就可以很方便地切换proxy了！","tags":["Mac"],"categories":["Mac"]},{"title":"Mac.安装Nginx","url":"/2022/04/19/85e46824c371.html","content":"\n\n\n## 目录\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## 参考\n\n- [参考](#%E5%8F%82%E8%80%83)\n- [环境](#%E7%8E%AF%E5%A2%83)\n- [步骤](#%E6%AD%A5%E9%AA%A4)\n- [基础操作](#%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## 参考\n\n1. [参考文章](https://blog.csdn.net/Wjhsmart/article/details/115739192)\n\n2. https://segmentfault.com/a/1190000022738645\n\n3. https://juejin.cn/post/6986190222241464350\n\n## 环境\n\n> 系统： Mac  Apple M1\n>\n> Docker:  version 20.10.7\n>\n> Homebrew 3.1.9-121-g654c78c\n\n## 步骤\n\n```bash\nbrew install nginx\n\n#启动\nbrew  services start nginx\n```\n\n## 基础操作\n\n```bash\n# 查看安装信息\nbrew info nginx\n# 卸载\nbrew uninstall nginx\n# 启动\nbrew service start nginx\n# 停止\nbrew service stop nginx\n# 重启\nbrew service restart nginx\n# 重新加载配置文件\nnginx -s reload\n# 验证配置是否正确\nnginx -t \n# 默认文件位置 /opt/homebrew/var/www\n# 配置文件可在 brew info nginx 中查看\n```\n\n","tags":["Mac"],"categories":["Mac"]},{"title":"哈夫曼树","url":"/2022/04/17/2b5387084965.html","content":"\n## 目录\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## 参考\n\n- [参考](#%E5%8F%82%E8%80%83)\n- [名词](#%E5%90%8D%E8%AF%8D)\n- [概念](#%E6%A6%82%E5%BF%B5)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## 参考\n\n1. http://c.biancheng.net/view/3398.html\n\n\n\n## 名词\n\n路径：在一棵树中，一个结点到另一个结点之间的通路，称为路径。图 1 中，从根结点到结点 a 之间的通路就是一条路径。\n\n路径长度：在一条路径中，每经过一个结点，路径长度都要加 1 。例如在一棵树中，规定根结点所在层数为1层，那么从根结点到第 i 层结点的路径长度为 i - 1 。图 1 中从根结点到结点 2的路径长度为 3。\n\n结点的权：给每一个结点赋予一个新的数值，被称为这个结点的权。例如，图 1 中结点 2 的权为 2，权为 4。\n\n结点的带权路径长度 (PL)：指的是从根结点到该结点之间的路径长度与该结点的权的乘积。例如，图 1 中结点 4的带权路径长度为 3*4 = 12 。\n\n<img src=\"/images/数据结构.哈夫曼树/image-20220417214831400.png\" alt=\"image-20220417214831400\" style=\"zoom:33%;\" />\n\n树的带权路径长度为树中所有叶子结点的带权路径长度之和。通常记作 “WPL” Weighted Path Length of Tree\n\n\n\n## 概念\n\n当用 n 个结点（都做叶子结点且都有各自的权值）试图构建一棵树时，如果构建的这棵树的带权路径长度最小，称这棵树为“最优二叉树”，有时也叫“赫夫曼树”或者“哈夫曼树”。\n\n在构建哈弗曼树时，要使树的带权路径长度最小，只需要遵循一个原则，那就是：权重越大的结点离树根越近。","tags":["数据结构"],"categories":["数据结构"]},{"title":"Mybatis.符号意义","url":"/2022/04/17/bc7562ea4e70.html","content":"\n## 目录\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## 参考\n\n- [参考](#%E5%8F%82%E8%80%83)\n- [背景](#%E8%83%8C%E6%99%AF)\n- [分析](#%E5%88%86%E6%9E%90)\n- [总结](#%E6%80%BB%E7%BB%93)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## 参考\n\n1. [原文](https://www.cnblogs.com/heyonggang/p/5953070.html)\n\n\n\n## 背景\n\n项目使用mybatis 作为ORM . 业务上需要对输入字段的内容做模糊查询。涉及到多个字段，因此使用到相关方面的知识。\n\n## 分析\n\n动态SQL是mybatis的强大特性之一，mybatis在对sql语句进行预编译之前，会对sql进行动态解析，解析为一个BoundSql对象，也是在此处对动态sql进行处理。下面让我们先来熟悉下mybatis里#{}与${}的用法：\n\n在动态sql解析过程，#{}与${}的效果是不一样的：\n\n> { } 解析为一个 JDBC 预编译语句（prepared statement）的参数标记符。\n\n　　如以下sql语句，#{}被解析为一个参数占位符\n\n```sql\nselect * from user where name = #{name};\n```\n\n　　会被解析为：\n\n```sql\nselect * from user where name = ?;\n```\n\n>  ${ } 仅仅为一个纯碎的 string 替换，在动态 SQL 解析阶段将会进行变量替换\n\n　　如以下sql语句：\n\n```\nselect * from user where name = ${name};\n```\n\n　　当我们传递参数“sprite”时，sql会解析为：\n\n```\nselect * from user where name = \"sprite\";\n```\n\n　　可以看到预编译之前的sql语句已经不包含变量name了。\n\n> <font color=\"red\"> ${ } 的变量的替换阶段是在动态 SQL 解析阶段，而 #{ }的变量的替换是在 DBMS 中</font>\n\n\n\n## 总结\n\n* \\#{}  ： 占位符，将传入的参数当成一个字符串，会给传入的参数加一个双引号\n* ${}  ：将传入的参数直接显示生成在sql中，不会添加引号\n* \\#{}能够很大程度上防止sql注入，${}无法防止sql注入，存在sql注入的风险。\n\n　　${}在预编译之前已经被变量替换了，如下sql\n\n```sql\nselect * from ${tableName} where name = ${name}\n```\n\n　　如果传入的参数tableName为user; delete user; --，那么sql动态解析之后，预编译之前的sql将变为：\n\n```SQL\nselect * from user; delete user; -- where name = ?;\n```\n\n　　之后的语句将作为注释不起作用，顿时我和我的小伙伴惊呆了！！！看到没，本来的查询语句，竟然偷偷的包含了一个删除表数据的sql，是删除，删除，删除！！！重要的事情说三遍，可想而知，这个风险是有多大。\n\n* ${}一般用于传输数据库的表名、字段名等\n* 能用#{}的地方尽量别用${}\n\n　　进入正题，通过上面的分析，相信大家可能已经对如何动态调用表名和字段名有些思路了。示例如下：\n\n```xml\n  <select id=\"getUser\" resultType=\"java.util.Map\" parameterType=\"java.lang.String\" statementType=\"STATEMENT\">\n    select \n        ${columns}\n    from ${tableName}\n        where COMPANY_REMARK = ${company}\n  </select>\n```\n\n","tags":["Mybatis"],"categories":["Mybatis"]},{"title":"TCP/IP Get 传参","url":"/2022/04/17/ddc62c927df9.html","content":"\n## 目录\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [<font color=\"red\">参考</font>](#font-colorred%E5%8F%82%E8%80%83font)\n- [零、总结](#%E9%9B%B6%E6%80%BB%E7%BB%93)\n- [一、误解](#%E4%B8%80%E8%AF%AF%E8%A7%A3)\n- [二、总结](#%E4%BA%8C%E6%80%BB%E7%BB%93)\n  - [浏览器](#%E6%B5%8F%E8%A7%88%E5%99%A8)\n  - [服务器](#%E6%9C%8D%E5%8A%A1%E5%99%A8)\n- [三、参考文章](#%E4%B8%89%E5%8F%82%E8%80%83%E6%96%87%E7%AB%A0)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## <font color=\"red\">参考</font>\n\n<font color=\"red\">[原文\n\n[](https://github.com/zhongxia245/blog/issues/35)</font>\n\n## 零、总结\n\n> 文章数据来源于网络，可能存在变动，但是原理是一样的。\n\n1. HTTP 协议 未规定 GET 和POST的长度限制\n2. GET的最大长度显示是因为 浏览器和 web服务器限制了 URI的长度\n3. 不同的浏览器和WEB服务器，限制的最大长度不一样\n4. 要支持IE，则最大长度为2083byte，若只支持Chrome，则最大长度 8182byte\n\n## 一、误解\n\n大家都知道http 中 存在 GET 和 POST 这两种最常用的请求方式。（PUT，DELETE不在本文讨论范围之内）\n\n**误解：HTTP 协议下的 Get 请求参数长度是有大小限制的，最大不能超过XX，而 Post 是无限制的。**\n\n1、首先即使有长度限制，也是限制的是**整个 URI 长度**，**而不仅仅是你的参数值数据长度**。\n\n2、HTTP 协议从未规定 GET/POST 的请求长度限制是多少。\n\n**以下内容摘自 [《关于 HTTP GET/POST 请求参数长度最大值的一个理解误区》](https://my.oschina.net/leejun2005/blog/136820)， 文章时间为 2013年的。可能以当前最新的浏览器有出入 **\n\n> The HTTP protocol does not place any a priori limit on the length of a URI. Servers MUST be able to handle the URI of any resource they serve, and SHOULD be able to handle URIs of unbounded length if they provide GET-based forms that could generate such URIs. A server SHOULD return 414 (Request-URI Too Long) status if a URI is longer than the server can handle (see section 10.4.15).\n> Note: Servers ought to be cautious about depending on URI lengths above 255 bytes, because some older client or proxy implementations might not properly support these lengths.\n\n3、所谓的请求长度限制是由**浏览器**和 **web 服务器**决定和设置的，各种浏览器和 web 服务器的设定\n均不一样，这依赖于各个浏览器厂家的规定或者可以根据 web 服务器的处理能力来设定。\n\n> The limit is in MSIE and Safari about 2KB, in Opera about 4KB and in Firefox about 8KB, (255 bytes if we count very old browsers) . We may thus assume that 8KB is the maximum possible length and that 2KB is a more affordable length to rely on at the server side and that 255 bytes is the safest length to assume that the entire URL will come in.\n> If the limit is exceeded in either the browser or the server, most will just truncate the characters outside the limit without any warning. Some servers however may send a HTTP 414 error. If you need to send large data, then better use POST instead of GET. Its limit is much higher, but more dependent on the server used than the client. Usually up to around 2GB is allowed by the average webserver. This is also configureable somewhere in the server settings. The average server will display a server-specific error/exception when the POST limit is exceeded, usually as HTTP 500 error.\n\nIE 和 Safari 浏览器 限制 2k\nOpera 限制4k\nFirefox 限制 8k（非常老的版本 256byte）\n\n如果超出了最大长度，大部分的服务器直接截断，也有一些服务器会报414错误。\n\n------\n\n> HTTP 1.1 defines Status Code 414 Request-URI Too Long for the cases where a server-defined limit is reached. You can see further details on RFC 2616. For the case of client-defined limits, there is no sense on the server returning something, because the server won't receive the request at all.\n\n详细可以看 RFC2616\n\n> The server is refusing to service the request because the Request-URI is longer than the server is willing to interpret. This rare condition is only likely to occur when a client has improperly converted a POST request to a GET request with long query information, when the client has descended into a URI \"black hole\" of redirection (e.g., a redirected URI prefix that points to a suffix of itself), or when the server is under attack by a client attempting to exploit security holes present in some servers using fixed-length buffers for reading or manipulating the Request-URI.\n\n------\n\n## 二、总结\n\n> 各个浏览器和web服务器的最大长度\n\n以下内容摘自[《GET请求中URL的最大长度限制总结》](http://www.cnblogs.com/cuihongyu3503319/p/5892257.html)， 文章内容是 2016年9月，相对比较符合当前的最新现状。 \n\n在网上查询之后，浏览器和服务器对url长度都有限制，现总结如下。\n\n### 浏览器\n\n**1、IE**\n\nIE浏览器（Microsoft Internet Explorer） 对url长度限制是2083（2K+53），超过这个限制，则自动截断（若是form提交则提交按钮不起作用）。\n\n**2、firefox**\n\nfirefox（火狐浏览器）的url长度限制为 65 536字符，但实际上有效的URL最大长度不少于100,000个字符。\n\n**3、chrome**\n\nchrome（谷歌）的url长度限制超过8182个字符返回本文开头时列出的错误。\n\n**4、Safari**\n\nSafari的url长度限制至少为 80 000 字符。\n\n**5、Opera**\n\nOpera 浏览器的url长度限制为190 000 字符。Opera 9 地址栏中输入190 000字符时依然能正常编辑。\n\n### 服务器\n\n**1、Apache**\n\nApache能接受url长度限制为8 192 字符\n\n**2、IIS**\n\nMicrosoft Internet Information Server(IIS)能接受url长度限制为16 384个字符。\n这个是可以通过修改的（IIS7）\n`configuration/system.webServer/security/requestFiltering/requestLimits@maxQueryStringsetting.<requestLimits maxQueryString=\"length\"/>`\n\n**3、Perl HTTP::Daemon**\n\nPerl HTTP::Daemon 至少可以接受url长度限制为8000字符。Perl HTTP::Daemon中限制HTTP request headers的总长度不超过16 384字节(不包括post,file uploads等)。但当url超过8000字符时会返回413错误。\n这个限制可以被修改，在Daemon.pm查找16×1024并更改成更大的值。\n\n**4、ngnix**\n\n可以通过修改配置来改变url请求串的url长度限制。\n\nclient_header_buffer_size 默认值：client_header_buffer_size 1k\n\nlarge_client_header_buffers默认值 ：large_client_header_buffers 4 4k/8k\n\n> 由于jsonp跨域请求只能通过get请求，url长度根据浏览器及服务器的不同而有不同限制。\n> 若要支持IE的话，url长度限制为2083字符，若是中文字符的话只有2083/9=231个字符。\n> 若是Chrome浏览器支持的最大中文字符只有8182/9=909个。\n\n## 三、参考文章\n\n1. [GET请求中URL的最大长度限制总结](http://www.cnblogs.com/cuihongyu3503319/p/5892257.html)\n2. [关于 HTTP GET/POST 请求参数长度最大值的一个理解误区](https://my.oschina.net/leejun2005/blog/136820)","tags":["Get"],"categories":["TCP/IP","Get"]},{"title":"Java1.8 parallelStream并发安全问题","url":"/2021/12/31/6b9b9d0eb84c.html","content":"\n### 目录\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [参考](#%E5%8F%82%E8%80%83)\n- [环境](#%E7%8E%AF%E5%A2%83)\n- [背景](#%E8%83%8C%E6%99%AF)\n- [问题](#%E9%97%AE%E9%A2%98)\n- [重现](#%E9%87%8D%E7%8E%B0)\n  - [案例](#%E6%A1%88%E4%BE%8B)\n  - [结果](#%E7%BB%93%E6%9E%9C)\n- [解决方案](#%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88)\n  - [方式1：上锁](#%E6%96%B9%E5%BC%8F1%E4%B8%8A%E9%94%81)\n  - [方式2：正确使用Stream](#%E6%96%B9%E5%BC%8F2%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8stream)\n- [原理简析](#%E5%8E%9F%E7%90%86%E7%AE%80%E6%9E%90)\n- [定位问题](#%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98)\n  - [问题1：数组越界](#%E9%97%AE%E9%A2%981%E6%95%B0%E7%BB%84%E8%B6%8A%E7%95%8C)\n  - [问题2：数据丢失](#%E9%97%AE%E9%A2%982%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1)\n- [正确姿势](#%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF)\n- [扩展](#%E6%89%A9%E5%B1%95)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n### 参考\n\n1. https://xlbpowder.cn/2019/04/26/parallelStream/\n2. https://blog.csdn.net/qq_42651904/article/details/106936140\n3. https://www.cnblogs.com/kevin-yuan/p/13533377.html\n4. [部分集合浅析](https://codexiaomai.github.io/posts/89530ef9)\n5. [并发网](http://ifeve.com/)\n6. [线程安全的集合](https://blog.csdn.net/Sampson_S/article/details/109149575)\n7. [集合框架](https://www.runoob.com/java/java-collections.html)\n\n### 环境\n\n> JDK:1.8 \n\n### 背景\n\n> 工作中遇到了关于使用==parallelStream==导致的**并发安全问题**，使用ArrayList容器进行数据交集等处理时，由于数据较多，希望通过并行流提高处理效率，但没考虑过线程安全问题。\n>\n> 解决的方法非常简单，正确的使用map、collect、reduce，或者使用线程安全容器、加锁即可。\n\n### 问题\n\n> 并发安全问题是可能会遇到异常\n\n1. 数组越界异常：ArrayIndexOutOfBoundsException\n2. 数据丢失（已经遇到😅）\n3. 数据null 值\n\n### 重现\n\n#### 案例\n\n```java\n  @Test\n    public void test153() throws InterruptedException {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 100_000; i++) {\n            //添加100个元素到集合中\n            list.add(i);\n        }\n        System.out.println(list.size());\n        System.out.println(\"-------------------LinkedList-----------------------------------\");\n        //添加数据的集合\n        List<Integer> list2 = new LinkedList<>();\n        //使用parallelStream的遍历方法来添加元素到新的集合\n        list.parallelStream().forEach(i -> {\n            list2.add(i);\n        });\n        //打印添加元素之后的集合长度\n        System.out.println(list2.size());\n        System.out.println(\"------------------------CopyOnWriteArrayList------------------------------\");\n        // 解决方式\n        List<Integer> list3 = new CopyOnWriteArrayList();\n        //使用parallelStream的遍历方法来添加元素到新的集合\n        list.parallelStream().forEach(i -> {\n            list3.add(i);\n        });\n        //打印添加元素之后的集合长度\n        System.out.println(list3.size());\n    }\n```\n\n#### 结果\n\n```txt\n100000\n-------------------LinkedList-----------------------------------\n50415\n------------------------CopyOnWriteArrayList------------------------------\n100000\n```\n\n### 解决方案\n\n#### 方式1：上锁\n\n> 使用线程安全的集合，底层是使用==锁==，性能低\n\n```java \n// Collections.synchronizedList(new ArrayList<>()); 此方式是把非线程安全的集合转成线程安全的集合（加锁）\nList<Integer> list3 = new CopyOnWriteArrayList();\n        //使用parallelStream的遍历方法来添加元素到新的集合\n        list.parallelStream().forEach(i -> {\n            list3.add(i);\n        });\n        //打印添加元素之后的集合长度\n        System.out.println(list3.size());\n```\n\n如用例所示\n\n常用线程安全集合\n\n[参考](https://www.cnblogs.com/wangbin2188/p/14781592.html)\n\n| 接口  | 线程不安全              | 线程安全                                                     |\n| ----- | ----------------------- | ------------------------------------------------------------ |\n| List  | ArrayList               | ==CopyOnWriteArrayList==,[vector](https://blog.csdn.net/Sampson_S/article/details/109149575) |\n| Map   | HashMap                 | ConcurrentHashMap, hashtable，Node ,treeNode,treeBin,ForwardingNode |\n| Set   | HashSet / TreeSet       | CopyOnWriteArraySet                                          |\n| Queue | ArrayDeque / LinkedList | ArrayBlockingQueue / LinkedBlockingQueue                     |\n| Deque | ArrayDeque / LinkedList | LinkedBlockingDeque                                          |\n\n\n\n#### 方式2：正确使用Stream\n\n> [官方文档](https://docs.oracle.com/javase/tutorial/collections/streams/parallelism.html)\n>\n> The Collections Framework provides synchronization wrappers, which add automatic synchronization to an arbitrary collection, making it thread-safe.\n>\n> 在文档中已经有说明，需要正确使用collect ，才能避免线程不安全。性能高\n>\n> 部分翻译：\n>\n> 集合框架提供了同步包装器，它为任意集合添加了自动同步，使其成为线程安全的\n>\n> 聚合操作和并行流使您能够实现非线程安全集合的并行性，前提是您在操作集合时不修改集合\n\n具体使用示例\n\n```java \n    @Test\n    public void test153() throws InterruptedException {\n        List<Integer> list = new ArrayList<>();\n        for (int i = 0; i < 100_000; i++) {\n            //添加100个元素到集合中\n            list.add(i);\n        }\n        System.out.println(list.size());\n     \n        System.out.println(\"------------------------Collectors.toList()------------------------------\");\n        List<Integer> list1 = list.parallelStream().collect(Collectors.toList());\n        System.out.println(list1.size());\n    }\n```\n\n说明： parallelStream与 collect，reduce 一同使用，可以满足线程安全，但是原理是不一样的。下面细说。 \n\n在使用过程中，由collect 进行数据流项的收集。不适用数据流外的变量。如果使用，就使用线程安全的集合（方式1）\n\n### 原理简析\n\n定位问题前，需要先初步了解fork/join 框架或者分治法或者[归并算法](https://www.cnblogs.com/chengxiao/p/6194356.html)\n\nparallelStream 底层就是使用fork/join 框架，运用分治的理念，把一个任务拆分成多个子任务去实现\n\n<img src=\"/images/Java1.8-parallelStream并发安全问题/image-20211231160840346.png\" alt=\"image-20211231160840346\" style=\"zoom:50%;\" />\n\n如图所示，一个线程的任务拆分成多个线程任务，最后合并结果。使用collect、reduce，而不使用数据流外的变量， 结果正确。查看源码，原理分析\n\n```java\n//接口 \n<R> R collect(Supplier<R> supplier,\n                  BiConsumer<R, ? super T> accumulator,\n                  BiConsumer<R, R> combiner);\n\n// Collectors.toList()的实现\n  public static <T>\n    Collector<T, ?, List<T>> toList() {\n        return new CollectorImpl<>((Supplier<List<T>>) ArrayList::new, List::add,\n                                   (left, right) -> { left.addAll(right); return left; },\n                                   CH_ID);\n    }\n```\n\n> 以Collectors.toList() 来分析\n>\n> 参数： Supplier<R> supplier   提供一个非线程安全的集合 arraylist，\n>\n> 参数： BiConsumer<R, ? super T> accumulator  累加器\n>\n> 参数： BiConsumer<R, R> combiner 合并器\n\n这里的意思是，每个线程都有一个集合，然后使用`合并器` 把各个线程的结果合并，所以不会有线程安全问题，不会丢失数据\n\n### 定位问题\n\n> 以arraylist 为例\n\n```java\n//源码\n    /**\n     *\n     * 添加一个元素时，做了如下两步操作\n     * 1.判断列表的capacity容量是否足够，是否需要扩容\n     * 2.真正将元素放在列表的元素数组里面\n     *\n     * Appends the specified element to the end of this list.\n     *\n     * @param e element to be appended to this list\n     * @return <tt>true</tt> (as specified by {@link Collection#add})\n     */\n    public boolean add(E e) {\n      //确保内部容量\n        ensureCapacityInternal(size + 1);  // Increments modCount!!\n      //赋值 \n      //需要说明的是，此处赋值，是先 elementData[size]=e\n      // 然后 size++ \n        elementData[size++] = e;\n        return true;\n    }\n\n```\n\n```java\n \t\t/**\n \t\t* 验证 elementData[size++] = e;执行顺序\n \t\t*/\n\t\t@Test\n    public void test239() {\n        int[] ints = new int[2];\n        int size = 0;\n        ints[size++] = 4;\n        System.out.println(ints[0]);\n        System.out.println(size);\n    }\n```\n\n分析：add元素时，实际做了两个大的步骤：\n\n1. 判断elementData数组容量是否满足需求\n2. 在elementData对应位置上设置值\n\n#### 问题1：数组越界\n\n> 多个线程进行add操作时，可能会导致elementData数组越界\n>\n> 例如A,B线程，都要add；在 ensureCapacityInternal时，要检测数组容量是否符合需求。A、B线程查看数组size 都是9 ，都认为可以不扩容进行add操作。\n>\n> A线程操作可以正常进行，完成后 size++ . size 是10 。当B线程add，然后发现size已经是10了，elementData[10] =e ,但是数组elementData 容量还是10，没有扩容。会发生ArrayIndexOutOfBoundsException 异常\n\n#### 问题2：数据丢失\n\n> elementData[size++] = e;此操作不是原子性的，单线程没问题。多线程时，容易发生一个线程的值被另一个线程覆盖\n>\n> 例如： A、B线程 同时add操作，size=0。 代码  ensureCapacityInternal(size + 1); 已经执行。此时，对A、B线程来说，size=0. A线程add完成 后（elementData[0]=1）  B 线程add 完成（elementData[0]=1）。size 在每个线程都会 ++ ，那么 下一次add时，size 是从 size=2 开始的，同时会出现数组下标为1的位置值为 null \n\n总结\n\n根本原因是，两个线程调传入了同一个ArrayList，这个参数在**==JVM内==**以地址方式存在栈内，指向堆区的（size和object[]数组），本质上调用\nArrayList add() \n时，是通过this.size获取堆内size，这时候两个线程操作同一个堆内变量，就会**==出现读取时的值是对的，但是使用时值已经被修改了==**，在此this.size，就是脏数据。ArrayList不是线程安全的容器，并发调用add就会发生线程安全的问题\n\n### 正确姿势\n\n> Collections框架提供的同步的包装（推荐）\n\n```java\n// 使用线程安全的集合 \nList<Integer> list3 = new CopyOnWriteArrayList();\n        //使用parallelStream的遍历方法来添加元素到新的集合\n        list.parallelStream().forEach(i -> {\n            list3.add(i);\n        });\n// 使用  官方提供的收集器 都是安全的\nList<Integer> list1 = list.parallelStream().collect(Collectors.toList());\n        System.out.println(list1.size());\n\n// Collectors.toList()\n// Collectors.toMap()\n// Collectors.toSet() 等等\n```\n\n### 扩展\n\n线程安全的list\n\n```java \n// java.util.concurrent.CopyOnWriteArrayList\nnew CopyOnWriteArrayList();\n\n// java.util.Collections.synchronizedList(new ArrayList())\nCollections.synchronizedList(new ArrayList())\n```\n\n线程安全的Set\n\n```java\njava.util.Collections.synchronizedSet(Sets.newHashSet()); // jdk提供的，使用同步来保证线程安全\nnew java.util.concurrent.CopyOnWriteArraySet<>(); // jdk提供的，底层使用 CopyOnWriteArrayList 实现，适合集合大小较小的场景\ncom.google.common.collect.Sets.newConcurrentHashSet(); // guava 提供的线程安全的 Set ，底层使用 ConcurrentHashMap 实现\ncom.alibaba.dubbo.common.utils.ConcurrentHashSet  // 底层使用 ConcurrentHashMap 实现\n```\n\n\n\n","tags":["JAVA"],"categories":["JAVA"]},{"title":"方法签名","url":"/2021/12/12/feef86e577e5.html","content":"\n## 目录\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## 参考\n\n- [参考](#%E5%8F%82%E8%80%83)\n- [Java](#java)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## 参考\n\n\n\n## Java\n\n[参考](https://blog.csdn.net/liu_sisi/article/details/88368846)\n\nwhat is method signature in java？\n在 Java 中什么是方法签名？\n\n> 书中是这么说的：\n> Definition: Two of the components of a method declaration comprise the method signature—the method’s name and the parameter types.\n\n方法声明的两个组件构成了方法签名 - **方法的名称**和**参数类型**。\n**example:**\n这里是一个典型的方法声明:\n\n```java\npublic double calculateAnswer(double wingSpan, int numberOfEngines,\n                              double length, double grossTons) {\n    //do the calculation here\n}\n1234\n```\n\n上面方法的签名是:\n`calculateAnswer(double, int, double, double)`\n\n参考了几篇博客，知道了方法签名具体是个什么东东，以前都是模模糊糊就过去了，下面放几个博客的链接\n\n> https://blog.csdn.net/u010592926/article/details/76637936\n>\n> https://blog.csdn.net/qiuchengjia/article/details/52910884","tags":["JAVA"],"categories":["JAVA"]},{"title":"打工法则","url":"/2021/11/02/36b87b5fdf67.html","content":"\n## 目录\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## 参考\n\n- [参考](#%E5%8F%82%E8%80%83)\n- [零、前言](#%E9%9B%B6%E5%89%8D%E8%A8%80)\n- [一、角色化法则](#%E4%B8%80%E8%A7%92%E8%89%B2%E5%8C%96%E6%B3%95%E5%88%99)\n- [二、成为Owner](#%E4%BA%8C%E6%88%90%E4%B8%BAowner)\n- [三、聪明工作](#%E4%B8%89%E8%81%AA%E6%98%8E%E5%B7%A5%E4%BD%9C)\n- [四、最终产物](#%E5%9B%9B%E6%9C%80%E7%BB%88%E4%BA%A7%E7%89%A9)\n- [五、要事第一](#%E4%BA%94%E8%A6%81%E4%BA%8B%E7%AC%AC%E4%B8%80)\n- [六、已知迁移](#%E5%85%AD%E5%B7%B2%E7%9F%A5%E8%BF%81%E7%A7%BB)\n- [七、过程精细化](#%E4%B8%83%E8%BF%87%E7%A8%8B%E7%B2%BE%E7%BB%86%E5%8C%96)\n- [总结](#%E6%80%BB%E7%BB%93)\n- [原文](#%E5%8E%9F%E6%96%87)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n## 参考\n\n\n\n## 零、前言\n\n如题，这篇文章想通过我总结的7个法则，聊聊如何高效打工。\n\n不管我们如何想做特立独行的少数派，打工都是现阶段，相当部分人标准化赚取面包的方式。\n\n纵使切格瓦拉教主如何一呼百应，大家嘴上喊着打工是不可能打工的，但身体却无比诚实。\n\n诚实如我，这段时间几乎日均投入15小时在打工上，想了想既然要分享，也没有比分享打工心得更合适的了。\n\n那么就谨以此文，称之为打工军规也好、职场软实力也好，献给各位也许被打工困扰的同学们～\n\n## 一、角色化法则\n\n为什么打工会让人心累神伤？\n\n我会从角色化扮演的角度，来解读打工为什么让人心累神伤。\n\n什么时候人不心累？做自己的时候不心累。\n\n但打工几乎不可能让你做自己，你在打工时永远是角色化的你。其实不只是打工，当你进入父亲、朋友、丈夫角色的时候，也都是角色化的自己，都会面临压力。\n\n角色化的你就不再是你，你不再是金城武也不再是刘德华，你只是一个敬业的演员，一样要和其它演员一样早起集合。\n\n角色化的压力在于：即使你再欣赏一起开会的同事，一旦你的职位和角色要求你去和他argue方案，你也得充满专业度地去争个面红耳赤。即使你们有温暖的瞬间，在办公场所，受限于在公司的角色，你们也无法像朋友一样相处。所以，从打工这件事的本质来说，承担好岗位角色本身才是主旋律。\n\n能够快速且专业地扮演好自己的角色，才是打工的重要目标。千万不要试图在工作中添加过多的个人情绪和喜好，试图时时刻刻做自己，这会很难被专业的打工组织、环境认可。\n\n进一步说，如何不心累呢？\n\n如果能够放过角色化的自己，就不会那么心累了。\n\n比如，你是一个很腼腆的人，很不喜欢约别人开会，但工作需要你又必须如此，所以你时常纠结。\n\n此刻建议的想法是，能够把自己融入到这个角色中，把工作角色和本我切分干净，不再把在公司开会这件事和自己的个人喜好、本我志向联系在一起，只当作是像体检、洗牙一样不太喜欢但又定期需要履行的事项即可，心理压力便不会那么大了。\n\n不心累之后，我们还会身体累，还会有很大的压力，担心忙到焦头烂额却完不成预期目标。\n\n在工作能力方面，我有过三次较大明显的跃迁，当我悟到这些之后，我的工作水平获得了较大的提升，现在我分享给大家。\n\n## 二、成为Owner\n\n第一个想法是：这事全靠我了。\n\n刚开始打工大家都会有畏难情绪，觉得自己是新人，就应该事事请教学习。但久了你会发现，职场的信息隔离往往强到不可忽视，最了解一个岗位的人往往是从事者自己。\n\n过分依赖于别人的信息输入，会让你停滞等待，仿佛总需要权威者的一句答复才能安心继续落地。\n\n但这是不对的，崇尚权威会冰封自己的主观能动性，成长缓慢。\n\n正确的思路是，意识到自己是这件事的owner，意识到自己应该做出决策并承担后果，意识到不依赖于信息输入，而是自己尝试验证来获得真知。能够有owner意识，才能逐步形成自己的工作风格，不陷于定式，能够让别人对你的工作方式和成果有所期待。\n\n迅速独立理清自己的思路，清晰透明地推动验证、得出结论，就是最佳完成工作的开始。\n\n欲戴王冠必承其重，有更大的权责，背后一定是更多的注视和误解，在追求成就之前，要先摆出足够独立负责、勇于付出的姿态。\n\n## 三、聪明工作\n\n第二个想法是：工作不该是辛苦的。\n\n英文也有这么一句话：work smarter not harder\n\n含义也显而易见，工作应该是倾注智慧越做越轻松的，而不是被动承受越做越累。\n\n职场里有相当一部分人是战术懒惰的，他们往往工作地很勤奋、很辛苦，但产出总是不多。\n\n在打工初期，往往靠着勤奋和辛苦获得了飞速成长，但马上因为疏于思考如何更聪明地工作，而无法突破瓶颈。\n\n战术懒惰会导致你误以为工作越辛苦越充实，所以你会更倾向于多做事、把自己的时间填满。但不经思考，往往会被困难的工作、不合时宜的工作占满精力，而真正该认真思考做出成绩的工作，被忽略掉了。衡量产出时，你只能交出10件60分次品，而其它聪明而精进的同事却可以交出2件高优先级的90分精品，虽然你付出的工作量可能更大，但从价值的角度上讲后者更多，也往往更受赏识。\n\n衡量工作产出，是以价值和质量为标准，从来不会以功劳和苦劳为标准来衡量。假使偶尔会，长期也没人能持续苦下去，这是无意义的内卷，没人想一辈子靠苦功夫工作。\n\n懂的聪明工作的人，对于同类问题的解法，一定是日益精进、不断迭代的。如果每一次你仍然以同样的方式去处理一个问题，你也许就存在一定的战术懒惰情况。工作的目标是不断迭代自己的工作模型和战术方法，让自己能越做越轻松，越做越精进，而不是不断加大自己的付出，试图用辛苦付出来获得慰藉。\n\n与其下苦功夫感动自己，不如多用智慧思索如何工作地更巧妙。\n\n## 四、最终产物\n\n第三个想法是：每一项工作都有最终产物\n\n我之前很喜欢从方方面面去拆解问题，形成一个个方案和分析报告，最后散落出来只是小碎片被组合后的更大碎片，问题仍然没有进展。小的问题被组合成大的问题，没有思考到底，问题越积越多，压力越来越大，没有全局地思考洞见。\n\n直到意识到最终产物的存在，才明白自己浪费了很多时间。\n\n首先，最终产物应该是一个独立交付的价值，比如一个如期上线的功能。\n\n这个功能应该有完整的介绍文档，那么按照这个思路，所有的信息都应该在这个文档中，包括会议沟通、变更、需求文档和技术文档。\n\n进一步说，如果不能被纳入到这个最终文档中的，一定是和这个目标偏差的工作，或者不算是一种产出。比如中途你解决了另一个高优系统bug，这是一个分支事件，不能被写在这个需求内，所以算另一项产出。\n\n而人经常会遇到多事项并行的情况，你会遇到很多值得解决的问题，解决之后，会占用你的精力并带给你满足感，这种满足感会迷惑你的感知，让你忘掉最初的目标。\n\n所以正确的方式是，每一个问题就是一个考卷，先把每一个考卷列出来，再一张张完成。而不是以每个考卷里的题目为单位，在一张张考卷上切换，那样可能每一张都不会及格。\n\n一切都要围绕一件事的主线来进行，不在当前主线上的事情，就要另开一条新主线，而同一时间，不应该有太多条主线。\n\n我意识到以上三个想法时，我的工作思路因而改变，获得了很大的提升，也希望能够引发大家思考和进步。\n\n但有思路只是第一步，还需要技巧和方法经验，接下来再分享3个小方法：\n\n## 五、要事第一\n\n第一个方法是：先做自己最揪心的事情。\n\n工作中往往很多事都让我们揪心，但必须要找到最揪心的那一件。最揪心意味着，你对那件事束手无策，或者完成风险极大。\n\n而做工作，某种意义上就是排除风险，而人对于风险是有潜意识感觉的。\n\n潜意识是不会骗人的，不管你有多少工作，多长的待办清单，总有那么一两件事是让你牵肠挂肚，焦虑到无法睡觉的。那么你要做的就是：听从你的内心，把这些事情作为最高优先级，优先地去完成。\n\n假设最揪心的事情我们称之为P0问题，那么依次再低优先级的就是的P1和P2。我们定义P0是必须完成的，P1和P2是应该完成的，P3和P4是建议完成的。虽然继续往后我们可以排到P8甚至更多，但一般来说，超过P4优先级的，就不是当下该考虑的事情，可以暂缓一下或者拖一拖。而往往最揪心的事情，都是P0的事情，你的内心已经帮你权衡好了。\n\n如上文所说，工作应该有最终产物，所以无论这个揪心的事情多复杂，都要找一张纸写下来，同时标清楚这个最终产物到底是什么。比如我最近揪心的是移动端搜索项目，那我就需要用一张思维导图，把移动端搜索相关我最担心的事情都写下来，一个个配上预计方案，写着写着就不会焦虑和担心了。\n\n不要给自己设置太多并行的所谓重要事项，first thing first，某一时刻重要的事情永远只有一件。\n\n## 六、已知迁移\n\n第二个方法是：从未知域映射到已知域。\n\n我接手新的项目、尝试新的工作，都能比较快地上手。\n\n核心的原因是，我擅长类比和联想，擅长把未知的问题映射到已知中考虑。\n\n我的本职工作是产品经理，在我需要从业务运营角度分析业务商业模型时，我不会第一时间去找商业分析的方法论学习，反之，我会先把商业模型和产品模型做一个映射类比，从自己熟悉的角度来看。\n\n比如我已知产品模型往往有增长和留存，有著名的AARRR模型，用户的获取和留存转化可以分为五大阶段。同时产品一定是某个业务的映射和反映，那么业务模型我也会拿这些已知经验去套，寻找业务模型中是否有类似的公式和逻辑。最后发现，其实业务中，也有类似的模型，比如销售七步法和获客漏斗。\n\n但进一步，未知域一定有很多东西是无法找到映射的，因为你目前已知域是有限的，且无法全部理解未知域的本质，这个时候就是获得成长的机会。\n\n比如，当你操盘业务的时候，不单单要考虑数据指标，还要考虑组织架构和部门合作，而映射到产品中，其实是产品模块的划分和系统服务之间的协作。这时候很多做业务的经验，比如权责边界、正向激励方法，就能反过来补充已知域，成为你做产品架构设计上的一些灵感。\n\n总之，当你遇到极其复杂的未知问题，建议：\n\n\\1. 找到熟悉的地方，用已知去类比，打开缺口\n\n\\2. 随着未知逐步清晰，分析并联想补充到自己熟悉的已知领域中\n\n这样坚持去做，会让你的本职工作领域建立起和更多其它知识领域的连接，能够不断联想抽象，让你习惯于复用已有经验，逐步融会贯通。\n\n## 七、过程精细化\n\n第三个方法是：随波逐流的事情不要做。\n\n人们常说go with the flow，但其实工作计划安排并不适用。\n\n工作中有很多事情是没有目标和清晰路径的，或是因为当前还不是最佳时机，或是因为这件事价值本身没那么大。当你需要反问自己：当前是不是做某项工作的最佳时机、当前做这件事是不是有价值的时候，往往答案都是否定的。\n\n一个没有时机目标和明确价值的事情，就是做到哪算哪，随波逐流的事情，我不建议大家做。\n\n这并不意味着我否定了很多长期有益的事情。就算是长期有益的事情，往往都有明确的兑现周期，只是周期比较长而已，同时，长期有价值的社区，往往也有明确的价值，只是单位时间内价值比较小。并不组织大家做长期有效的事情，我真正希望大家警惕的是那些“看似有用”的形式化事项，落实下来往往发现根本无法落地，也无法制定明确计划。\n\n比如当你写年度计划，你很希望自己能够在英语方面有所建树，但如果你的事情是“读100篇英文文章”，这就是一件很随波逐流的事情。真正有清晰价值和路径的事情，应该足够细化，比如：\n\n\\1. 在英语方面有建树，到什么程度？是否能用托福100分等来衡量？\n\n\\2. 为了达到托福100分，一定不是随便“读100篇英文文章”就可以概括的，你该如何安排这100篇文章，这100篇文章该如何选择，才和托福100分有强关联，是否“读100篇英文文章”有80%以上概率保证你能达到目标？\n\n\\3. 进一步，如何拆解这个实现路径，用多少时间来准备，多少时间复习？\n\n为了能够拿到明确地产出，让自己不后悔，想真正达到的结果，一定要通过严格的过程管理来保证拿到，否则事事都随波逐流去做，就好像一边去山上放养，又不想赶羊，祈求靠运气能让所有羊按时回家一样，是完全失去掌控的。\n\n尤其在团队合作中，项目管理的重要性，远远大于一个足够优秀的好点子。\n\n能够用精细化过程管理拿到价值的人，才是团队最需要的。\n\n## 总结\n\n最后，打个总结。\n\n> 建议1：角色化法则\n\n要让自己正视工作，足够专业，需要理解角色化和本我的关系，不去混淆个人喜好和角色专业该做的事情。\n\n> 建议2：成为Owner\n\n善于学习，但又不依靠和崇尚权威，相信自己在某一个决策当下的独特性，敢于用责任感和努力来逼近最优的决策。\n\n> 建议3：聪明工作\n\n要让工作越做越简单，把有限的精力投入到“更聪明地工作中”而不是“更辛苦地工作中”，关注产出而不是付出。\n\n> 建议4：最终产物\n\n确定好工作的主线，不断往主线上丰富内容，而不是发散地投入精力在分散的事情上，导致主线进展模糊。\n\n> 建议5：要事第一\n\n为了选定好的主线，要有“要事第一”的原则，不是最揪心的事情，可以暂不投入很多精力去思考，同一时间，最重要的事情永远只有一个。\n\n> 建议6：已知迁移\n\n如果遇到了未知的事情，先从已知入手类比，是很好的切入方式，不但能消化未知，也能将新知和已知融会贯通，让自己获得更完整的洞见。\n\n> 建议7：过程精细化\n\n在工作中，做每一件事，都要有明确目标和计划路径，精细化的过程管理，去思考明确目标、强关联举措和可行性，可能是职场中最需要修炼的主要能力。\n\n以上就是：从心智，到战术，到方法层面，我总结的高效打工7条建议，希望能够帮到大家。\n\n以上，感谢。\n\n\n\n## 原文\n\n1. [原文](https://sspai.com/post/67462)","tags":["工作"],"categories":["工作"]},{"title":"数字签名","url":"/2021/11/02/5e4c0b9ce5a2.html","content":"\n\n\n对文件本身加密可能是个耗时过程，比如这封Email足够大，那么私钥加密整个文件以及拿到文件后的解密无疑是巨大的开销。\n\n数字签名可以解决这个问题：\n\n1. A先对这封Email执行哈希运算得到hash值简称“摘要”，取名h1\n2. 然后用自己私钥对摘要加密，生成的东西叫“数字签名”\n3. 把数字签名加在Email正文后面，一起发送给B（当然，为了防止邮件被窃听你可以用继续公钥加密，这个不属于数字签名范畴）\n4. B收到邮件后用A的公钥对数字签名解密，成功则代表Email确实来自A，失败说明有人冒充\n5. B对邮件正文执行哈希运算得到hash值，取名h2\n6. B 会对比第4步数字签名的hash值h1和自己运算得到的h2，一致则说明邮件未被篡改。\n\n![image.png](/images/安全.数字签名.assets/1614321306332-13329fb7-71d6-4c39-bcf7-75183fb29c3e.png)\n\n**其实就是利用算法（不一定是非对称算法）对原文hash值加密，然后附着到原文的一段数据。数字签名的作用就是验证数据来源以及数据完整性！解密过程则称为数字签名验证**\n\n**\n**\n\n如果中间人同时篡改了Email正文和数字签名，那B收到邮件无法察觉啊。\n\n答案：数字签名的生成需要对方私钥，所以数字签名很难被伪造。万一私钥泄漏了呢，不好意思，你私钥都能弄丢了那这篇文章当我白写。（私钥绝对保密不参与传输）\n\n公钥是公开的并且可以自行导入到电脑，如果有人比如C偷偷在B的电脑用自己公钥替换了A的公钥，然后用自己的私钥给B发送Email，这时B收到邮件其实是被C冒充的但是他无法察觉。\n\n答案：确实存在这种情况！解决办法就是数字证书\n\n参考\n\n1. https://www.cnblogs.com/kingsleylam/p/4985571.html\n","tags":["安全","数字签名"],"categories":["安全"]},{"title":"安全.数字证书","url":"/2021/10/27/602c653329a2.html","content":"\n### 目录\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [申请流程](#%E7%94%B3%E8%AF%B7%E6%B5%81%E7%A8%8B)\n- [证书使用流程](#%E8%AF%81%E4%B9%A6%E4%BD%BF%E7%94%A8%E6%B5%81%E7%A8%8B)\n- [参考](#%E5%8F%82%E8%80%83)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\n\n\n\n### 申请流程**\n\n1. 自己**本地先生成一对密匙**，然后拿着**自己的公匙**以及其他信息（比如说企业名称啊什么的）去CA申请数字证书。\n2. CA在拿到这些信息后，会选择一种**单向Hash算法**（比如说常见的MD5）对这些信息进行加密，加密之后的东西我们称之为**摘要**：\n3. 单向Hash算法有一种特点就是单向不可逆的，只要原始内容有一点变化，加密后的数据都将会是千差万别（当然也有很小的可能性会重复，有兴趣的小伙伴鸽巢原理了解一下），这样就防止了信息被篡改。\n4. 生成摘要后还不算完，**CA还会用自己的****私匙****对****摘要****进行加密**，摘要加密后的数据我们称之为数字签名。\n5. 最后，CA将会把我们的**申请信息（包含服务器的公匙）和数字签名**整合在一起，由此而生成**数字证书**。\n6. 然后CA将数字证书传递给我们\n\n![image.png](/images/安全.数字证书.assets/1614323760202-763ba837-24b7-4e73-bd45-3e29c5d76438.png)\n\n### 证书使用流程\n\n服务器在获取到数字证书后，服务器会将数字证书发送给客户端，客户端就需要用CA的公匙解密数字证书并验证数字证书的合法性。那我们如何能拿到CA的公匙呢？我们的电脑和浏览器中已经内置了一部分权威机构的根证书，这些根证书中包含了CA的公匙。\n\n之所以是根证书，是因为现实生活中，认证中心是分层级的，也就是说有顶级认证中心，也有下面的各个子级的认证中心，是一个树状结构，计算机中内置的是最顶级机构的根证书，不过不用担心，根证书的公匙在子级也是适用的。\n\n客户端用CA的公匙解密数字证书，如果解密成功则说明证书来源于合法的认证机构。解密成功后，客户端就拿到了摘要。\n\n此时，客户端会按照和CA一样的Hash算法将申请信息生成一份摘要，并和解密出来的那份做对比，如果相同则说明内容完整，没有被篡改。最后，客户端安全的从证书中拿到服务器的公匙就可以和服务器进行安全的非对称加密通信了。服务器想获得客户端的公匙也可以通过相同方式\n\n### 参考\n\n1. https://zhuanlan.zhihu.com/p/61702029\n2. https://www.jianshu.com/p/4932cb1499bf\n","tags":["安全","数字证书"],"categories":["安全"]},{"title":"安全.加密","url":"/2021/10/27/def6c9efa48c.html","content":"\n\n\n> 为了保证消息的保密性，就需要用到加密和解密。加解密算法目前主流的分为**对称加密和非对称加密**。\n\n## 对称加密\n\n> 对称加密（共享密匙加密）\n\n客户端和服务器**公用一个密匙**用来对消息加解密，这种方式称为**对称加密**。客户端和服务器**约定**好一个加密的密匙。客户端在发消息前用该密匙对消息加密，发送给服务器后，服务器再用该密匙进行解密拿到消息\n\n![img](/images/安全.加密/1614220965960-9c303346-48e7-473c-9f61-88d14c5f442f.png)\n\n### 优点\n\n对称加密解决了http中消息保密性的问题\n\n### 缺点\n\n对称加密虽然保证了消息保密性，但是因为客户端和服务器共享一个密匙，这样就使得密匙特别容易泄露\n\n![image.png](/images/安全.加密/1614221021852-11298c4c-b024-4c60-9b88-aae90134bb45.png)\n\n### 常见方式\n\n1. DES: **Data Encryption Standard** ： 替换+移位、56位密钥、64位数据块、速度快、密钥易产生\n2. 3DES：**Triple DES** (三重DES):两个56位的密钥K1、K2\n   加密:K1加密->K2解密->K1加密\n   解密:K1解密->K2加->K1解密\n3. RC5: **Rivest Cipher 5**  RSA数据安全公司的很多产品都使用了RC-5。\n4. IDEA法: **International Data Encryption Algorithm** 128位密钥、64位数据块、比DES的加密性好、对计算机功能要求相对低,PGP\n5. AES算法: **Advanced Encryption Standard**  高级加密标准,又称 Rijndael加m密法,是美国政府采用的一种区块加密标准。\n\n## 非对称加密\n\n> 非对称加密（公有密匙加密）\n\n既然对称加密中，密匙那么容易泄露，那么我们可以采用一种非对称加密的方式来解决。\n\n采用非对称加密时，**客户端和服务端均拥有一个公有密匙和一个私有密匙**。公有密匙可以对外暴露，而私有密匙只有自己可见。\n\n使用公有密匙加密的消息，只有对应的私有密匙才能解开。反过来，使用私有密匙加密的消息，只有公有密匙才能解开。这样客户端在发送消息前，**先用服务器的公匙对消息进行加密，服务器收到后再用自己的私匙进行解密**\n\n![image.png](/images/安全.加密/1614221148302-300b91f8-13b8-4b28-b52e-c74fb84ec1fd.png)\n\n### 优点\n\n1）非对称加密采用公有密匙和私有密匙的方式，解决了http中消息保密性问题，而且使得私有密匙泄露的风险降低；\n\n2）因为公匙加密的消息只有对应的私匙才能解开，所以较大程度上保证了消息的来源性以及消息的准确性和完整性\n\n### 缺点\n\n1. 非对称加密时需要使用到接收方的公匙对消息进行加密，但是公匙不是保密的，任何人都可以拿到，中间人也可以。那么中间人可以做两件事，第一件是中间人可以在客户端与服务器交换公匙的时候，将客户端的公匙替换成自己的。这样服务器拿到的公匙将不是客户端的，而是服务器的。服务器也无法判断公匙来源的正确性。第二件是中间人可以不替换公匙，但是他可以截获客户端发来的消息，然后篡改，然后用服务器的公匙加密再发往服务器，服务器将收到错误的消息；\n2. 非对称加密的性能相对对称加密来说会慢上几倍甚至几百倍，比较消耗系统资源。正是因为如此，**https将两种加密结合了起来**\n\n**![image.png](/images/安全.加密/1614224826514-cc045717-b1a4-4735-858a-e62670a656d3.png)**\n\n### 常见方式\n\n1. RSA:2048位(或1024位)密钥、计算量极大、难破解\n\n   > RSA是1977年由罗纳德·李维斯特（Ron Rivest）、阿迪·萨莫尔（Adi Shamir）和伦纳德·阿德曼（Leonard Adleman）一起提出的。当时他们三人都在麻省理工学院工作。RSA就是他们三人姓氏开头字母拼在一起组成的 [1]\n\n2. Elgamal:安全性依赖于计算有限域上离散对数这一难题\n\n3. ECC:  **椭圆曲线加密算法**  \n\n","tags":["安全","加密"],"categories":["安全"]},{"title":"about","url":"/about/index.html"},{"title":"categories","url":"/categories/index.html"},{"title":"tags","url":"/tags/index.html"},{"url":"/attachment/index.html","content":"<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n</head>\n<body>\n<pre>\nspring:\n  cloud:\n    gateway:\n      globalcors: # 全局的跨域处理\n        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题\n        corsConfigurations:\n          '[/**]':\n            allowedOrigins: # 允许哪些网站的跨域请求\n              - \"http://localhost:8090\"\n              - \"http://www.leyou.com\"\n            allowedMethods: # 允许的跨域ajax的请求方式\n              - \"GET\"\n              - \"POST\"\n              - \"DELETE\"\n              - \"PUT\"\n              - \"OPTIONS\"\n            allowedHeaders: \"*\" # 允许在请求中携带的头信息\n            allowCredentials: true # 是否允许携带cookie\n            maxAge: 360000 # 这次跨域检测的有效期\n</pre>\n</body>\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n<script>\n  axios.get(\"http://localhost:10010/user/1?authorization=admin\")\n  .then(resp => console.log(resp.data))\n  .catch(err => console.log(err))\n</script>\n</html>"},{"title":"archives","url":"/archives/index.html"},{"title":"schedule","url":"/schedule/index.html"}]